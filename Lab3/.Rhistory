varlist = as.list(vardes["Variable"])
data = select(CovidData, varlist)
varlist = pull(vardes, Variable)
data = select(CovidData, varlist)
View(data)
data = select(CovidData, c(varlist))
data = select(CovidData, c(varlist))
data = select(CovidData, c(varlist, deathspc))
data = select(CovidData, c(varlist, deathspc))
View(data)
data = select(CovidData, c(varlist, state))
varlist = pull(vardes[vardes$Source== "Opportunity Insights" | "PM_COVID"], Variable)
## Preparing Data ##
CovidData = read.csv("CovidData.csv")
rm(list=ls())
setwd("/Users/hongjingpeng/Desktop/Machine\ Learning/Machine-Learning-2022W/Lab3")
## Preparing Data ##
CovidData = read.csv("CovidData.csv")
vardes = read_excel("VariableDescription.xlsx")
## Data Analysis ##
## 1. Filter variables
varlist = pull(vardes[vardes$Source== ("Opportunity Insights" | "PM_COVID")], Variable)
data = select(CovidData, c(varlist, state))
varlist = pull(vardes[vardes$Source == "Opportunity Insights" | vardes$Source == "PM_COVID"],
Variable)
varlist = pull(vardes[vardes$Source != "NY Times"], Variable)
varlist = pull(vardes[vardes$Source != "NY Times", ], Variable)
data = select(CovidData, c(varlist, state))
data = select(CovidData, c(varlist, county, state, deathspc))
View(data)
data = select(CovidData, c(county, state, deathspc, varlist))
View(data)
library("stargazer")
stargazer(data)
View(CovidData)
View(vardes)
oi = pull(vardes[vardes$Source == "Opportunity Insights", ], Variable)
pmcovid = pull(vardes[vardes$Source == "PM_COVID", ], Variable)
data = select(CovidData, c(county, state, deathspc, oi, pmcovid))
rm(list=ls())
setwd("/Users/hongjingpeng/Desktop/Machine\ Learning/Machine-Learning-2022W/Lab3")
## Preparing Data ##
CovidData = read.csv("CovidData.csv")
vardes = read_excel("VariableDescription.xlsx")
## Data Analysis ##
## 1. Filter variables
oi = pull(vardes[vardes$Source == "Opportunity Insights", ], Variable)
pmcovid = pull(vardes[vardes$Source == "PM_COVID", ], Variable)
data = select(CovidData, c(county, state, deathspc, oi, pmcovid))
stargazer(select(CovidData, c(oi)))
stargazer(select(CovidData, c(oi)), omit.summary.stat = c("p25", "p75"))
stargazer(select(CovidData, c(oi)), digits = 2, omit.summary.stat = c("p25", "p75"))
oi = pull(vardes[vardes$Source == "Opportunity Insights", ], Variable) ## Opportunity Insights
oi_label = pull(vardes[vardes$Source == "Opportunity Insights", ], Description)
pmcovid = pull(vardes[vardes$Source == "PM_COVID", ], Variable) ## PM COVID
pmcovid_label = pull(vardes[vardes$Source == "PM_COVID", ], Description)
stargazer(select(CovidData, c(oi)), digits = 2,
column.labels = oi_label, omit.summary.stat = c("p25", "p75"))
stargazer(select(CovidData, c(oi)), digits = 2,
column.labels = c(oi_label), omit.summary.stat = c("p25", "p75"))
stargazer(select(CovidData, c(oi)), digits = 2,
row.labels = c(oi_label), omit.summary.stat = c("p25", "p75"))
stargazer(select(CovidData, c(oi)), digits = 2,
covariate.labels = c(oi_label), omit.summary.stat = c("p25", "p75"))
View(data)
data[complete.cases(data), ]
data = data[complete.cases(data), ]
library("readxl")
library("dplyr")
library("stargazer")
rm(list=ls())
setwd("/Users/hongjingpeng/Desktop/Machine\ Learning/Machine-Learning-2022W/Lab3")
## Preparing Data ##
CovidData = read.csv("CovidData.csv")
vardes = read_excel("VariableDescription.xlsx")
## Data Analysis ##
## 1. Filter variables
oi = pull(vardes[vardes$Source == "Opportunity Insights", ], Variable) ## Opportunity Insights
oi_label = pull(vardes[vardes$Source == "Opportunity Insights", ], Description)
pmcovid = pull(vardes[vardes$Source == "PM_COVID", ], Variable) ## PM COVID
pmcovid_label = pull(vardes[vardes$Source == "PM_COVID", ], Description)
data = select(CovidData, c(county, state, deathspc, oi, pmcovid))
na.omit(data)
data = na.omit(data)
View(data)
install.packages("fastDummies")
library("fastDummies")
data = dummy_cols(data, select_columns = "state")
View(data)
rm(list=ls())
setwd("/Users/hongjingpeng/Desktop/Machine\ Learning/Machine-Learning-2022W/Lab3")
## Preparing Data ##
CovidData = read.csv("CovidData.csv")
vardes = read_excel("VariableDescription.xlsx")
## Data Analysis ##
## 1. Filter variables
oi = pull(vardes[vardes$Source == "Opportunity Insights", ], Variable) ## Opportunity Insights
oi_label = pull(vardes[vardes$Source == "Opportunity Insights", ], Description)
pmcovid = pull(vardes[vardes$Source == "PM_COVID", ], Variable) ## PM COVID
pmcovid_label = pull(vardes[vardes$Source == "PM_COVID", ], Description)
data = select(CovidData, c(county, state, deathspc, oi, pmcovid))
## 2. Descriptive statistics
stargazer(select(CovidData, c(oi)), digits = 2,
covariate.labels = c(oi_label), omit.summary.stat = c("p25", "p75"))
stargazer(select(CovidData, c(pmcovid)), digits = 2,
covariate.labels = c(pmcovid_label), omit.summary.stat = c("p25", "p75"))
## 3. Drop all observations with missing values.
data = na.omit(data)
data = dummy_cols(data, select_columns = "state")
aggregate(data$state)
aggregate(data$state, FUN=sum)
aggregate(data$state, by=list(Category=data$state), FUN=sum)
aggregate(data$state, by=list(Category=data$state), FUN=count)
my_summary_data = data %>%
group_by(state) %>%
summarise(Count = n())
my_summary_data
View(my_summary_data)
sum(my_summary_data$count)
sum(my_summary_data$Count)
my_summary_data = CovidData %>%
group_by(state) %>%
summarise(Count = n())
my_summary_data
View(CovidData)
View(my_summary_data)
View(CovidData)
set.seed(1)
train = sample(seq_len(nrow(data)), size = 4*nrow(data)/5)
data.train = data[train,]
data.test = data[-train,]
ols = lm(deathspc ~., data = data.train)
View(ols)
summary(ols)
View(data)
ols = lm(deathspc ~., data = data.train[-c(county, state), ])
ols = lm(deathspc ~., data = data.train[-c("county", "state"), ])
ols = lm(deathspc ~., data = subset(data.train, select = -c("county", "state")))
ols = lm(deathspc ~., data.train[c("county", "state"), ])
ols = lm(deathspc ~., data = data.train[c("county", "state"), ])
ols = lm(deathspc ~. - state - county, data = data.train)
summary(ols)
summary(data.train$state)
summary(data.train$state_Wyoming)
ols = glm(deathspc ~. - state - county, data = data.train)
View(ols)
View(ols)
ols = lm(deathspc ~. - state - county, data = data.train)
View(ols)
summary(ols)
r2.train = summary(ols)$r.sq
mse.train = mean(ols$residuals^2)
mean((data.train$deathspc - predict(ols, data.train))^2)
predict.test = predict(ols, data.test)
predict.test = predict(ols, data.test[-c(county), ])
predict.test = predict(ols, data.test[-c("county"), ])
predict.test = predict(ols, data.test[-"county", ])
predict.test = predict(ols, data.test[-county, ])
predict.test = predict(ols, data.test[, -c("county")])
predict.test = predict(ols, data.test[, !names(data.test) %in% c("county", "state")])
View(data.test)
predict.test = predict(ols, data.test[, c("county", "state")])
predict.test = predict(ols, data.test[, -c("county", "state")])
predict.test = predict(ols, data.test[, -which(names(data.test) == c("county", "state"))])
predict.test = predict(ols, data.test[, -which(names(data.test) == "county"))])
predict.test = predict(ols, data.test[, -which(names(data.test) == "county")])
View(data.test)
data.test$county
select(data.test, -c("county"))
select(data.test, -c("county", "state"))
predict.test = predict(ols, select(data.test, -c("county", "state")))
test = select(data.test, -c("county", "state"))
predict.test = predict(ols, test)
predict.test = predict(ols, data.test)
ols = lm(deathspc ~. - state - county, data = data.train)
summary(ols)
predict.test = predict(ols, data.test)
predict.test = predict(ols, test)
predict.test = predict(ols, newdata = test)
View(test)
ols = lm(deathspc ~. - county - state, data = data.train)
r2.train = summary(ols)$r.sq
mse.train = mean(ols$residuals^2)
test = select(data.test, -c("county", "state"))
predict.test = predict(ols, newdata = test)
test = select(data.test, -c("state"))
predict.test = predict(ols, newdata = test)
predict.test = predict(ols, test)
head(test)
data.train.fit = select(data.train, -c("county", "state"))
ols = lm(deathspc ~., data = data.train.fit)
r2.train = summary(ols)$r.sq
mse.train = mean(ols$residuals^2)
data.test.fit = select(data.test, -c("county", "state"))
predict.test = predict(ols, data.test.fit)
predict.test = predict(ols, data.test.fit)
mse.test = mean((data.test.fit$deathspc - predict(ols, data.test.fit))^2)
data.test.fit = select(data.test, -c("county", "state"))
y.test = predict(ols, data.test.fit)
mse.test = mean((data.test.fit$deathspc - y.test)^2)
mse.train = mean(ols$residuals^2)
# MSE in the test set
data.test.fit = select(data.test, -c("county", "state"))
pred.test = predict(ols, data.test.fit)
y.test = data.test.fit$deathspc
mse.test = mean((y.test - pred.test)^2)
# R^2 in the test set
rss = sum((y.test - pred.test)^2)
tss = sum((y.test - mean(y.test))^2)
r2.test = 1 - rss/tss
library(glmnet)
grid=10^seq(2,-2,length=100)
grid
y = data.train$deathspc
x = model.matrix(deathspc~., data.train.fit)[,-1]
ridge.mod=glmnet(x, y, alpha=0, lambda=grid) # glmnet() standardizes the variables by default
cv.out = cv.glmnet(x, y, alpha=0)
plot(cv.out)
cv.out = cv.glmnet(x, y, alpha=0, lambda=grid)
plot(cv.out)
plot(cv.out, log='x')
plot(cv.out)
plot(ridge.cv.out)
ridge.cv.out = cv.glmnet(x, y, alpha=0, lambda=grid)
# c.plot
plot(ridge.cv.out)
ridge.bestlam = ridge.cv.out$lambda.min
ridge.bestmod = glmnet(x, y, alpha=0, lambda=ridge.bestlam)
## Lasso
# a. model estimation
lasso.mod=glmnet(x, y, alpha=1, lambda=grid)
# b. 10-fold cross-validation
lasso.cv.out = cv.glmnet(x, y, alpha=1, lambda=grid)
# c.plot
plot(lasso.cv.out)
# d. choosing the optimal value
lasso.bestlam = lasso.cv.out$lambda.min
# e. re-estimate using the optimal lambda
lasso.bestmod = glmnet(x, y, alpha=1, lambda=lasso.bestlam)
grid = 10^seq(3,-3,length=100)
# a. model estimation
lasso.mod=glmnet(x, y, alpha=1, lambda=grid)
# b. 10-fold cross-validation
lasso.cv.out = cv.glmnet(x, y, alpha=1, lambda=grid)
# c.plot
plot(lasso.cv.out)
# d. choosing the optimal value
lasso.bestlam = lasso.cv.out$lambda.min
# e. re-estimate using the optimal lambda
lasso.bestmod = glmnet(x, y, alpha=1, lambda=lasso.bestlam)
x.test = model.matrix(deathspc~., data.test.fit)[,-1]
ridge.pred = predict(ridge.bestmod, s = ridge.bestlam, newx =x.test)
mse.ridge = mean((ridge.pred - y.test)^2)
rss.ridge = sum((y.test - ridge.pred)^2)
r2.ridge= 1 - rss.ridge/tss
lasso.pred = predict(lasso.bestmod, s = lasso.bestlam, newx =x.test)
mse.lasso = mean((lasso.pred - y.test)^2)
rss.lasso = sum((y.test - lasso.pred)^2)
r2.lasso = 1 - rss.lasso/tss
View(data)
View(vardes)
stargazer(select(CovidData, c(pmcovid)), digits = 2,
covariate.labels = c(pmcovid_label), omit.summary.stat = c("p25", "p75"))
data.train.fit = select(data.train, -c("county", "state"))
ols = lm(deathspc ~., data = data.train.fit)
summary$ols
ols = lm(deathspc ~., data = data.train.fit)
summary$ols
summary(ols)
set.seed(2)
train = sample(seq_len(nrow(data)), size = 4*nrow(data)/5)
data.train = data[train,]
data.test = data[-train,]
data.train.fit = select(data.train, -c("county", "state"))
ols = lm(deathspc ~., data = data.train.fit)
summary(ols)
set.seed(100)
train = sample(seq_len(nrow(data)), size = 4*nrow(data)/5)
data.train = data[train,]
data.test = data[-train,]
## 6. OLS estimation
data.train.fit = select(data.train, -c("county", "state"))
ols = lm(deathspc ~., data = data.train.fit)
summary(ols)
r2.train = summary(ols)$r.sq
mse.train = mean(ols$residuals^2)
data.test.fit = select(data.test, -c("county", "state"))
pred.test = predict(ols, data.test.fit)
y.test = data.test.fit$deathspc
mse.test = mean((y.test - pred.test)^2)
rss = sum((y.test - pred.test)^2)
tss = sum((y.test - mean(y.test))^2)
r2.test = 1 - rss/tss
set.seed(1)
train = sample(seq_len(nrow(data)), size = 4*nrow(data)/5)
data.train = data[train,]
data.test = data[-train,]
ols = lm(deathspc ~. -state_Wisconsin - state_Wyoming, data = data.train.fit)
summary(ols)
r2.train = summary(ols)$r.sq
mse.train = mean(ols$residuals^2)
# MSE in the test set
data.test.fit = select(data.test, -c("county", "state"))
pred.test = predict(ols, data.test.fit)
y.test = data.test.fit$deathspc
mse.test = mean((y.test - pred.test)^2)
rss = sum((y.test - pred.test)^2)
tss = sum((y.test - mean(y.test))^2)
r2.test = 1 - rss/tss
install.packages("plm")
library(plm)
pols = plm(deathspc ~. , data = data.train, index = c("state"), model = "within")
CovidData = read.csv("CovidData.csv")
vardes = read_excel("VariableDescription.xlsx")
## Data Analysis ##
## 1. Filter variables
oi = pull(vardes[vardes$Source == "Opportunity Insights", ], Variable) ## Opportunity Insights
oi_label = pull(vardes[vardes$Source == "Opportunity Insights", ], Description)
pmcovid = pull(vardes[vardes$Source == "PM_COVID", ], Variable) ## PM COVID
pmcovid_label = pull(vardes[vardes$Source == "PM_COVID", ], Description)
data = select(CovidData, c(county, state, deathspc, oi, pmcovid))
set.seed(1)
train = sample(seq_len(nrow(data)), size = 4*nrow(data)/5)
data.train = data[train,]
data.test = data[-train,]
pols = plm(deathspc ~. , data = data.train, index = c("state"), model = "within")
pols = plm(deathspc ~., data = data.train, index = c("state"), model = "within")
rm(list=ls())
setwd("/Users/hongjingpeng/Desktop/Machine\ Learning/Machine-Learning-2022W/Lab3")
CovidData = read.csv("CovidData.csv")
vardes = read_excel("VariableDescription.xlsx")
## Data Analysis ##
## 1. Filter variables
oi = pull(vardes[vardes$Source == "Opportunity Insights", ], Variable) ## Opportunity Insights
oi_label = pull(vardes[vardes$Source == "Opportunity Insights", ], Description)
pmcovid = pull(vardes[vardes$Source == "PM_COVID", ], Variable) ## PM COVID
pmcovid_label = pull(vardes[vardes$Source == "PM_COVID", ], Description)
data = select(CovidData, c(county, state, deathspc, oi, pmcovid))
data = na.omit(data)
## 4. Create dummies for states and the District of Columbia
data = dummy_cols(data, select_columns = "state")
set.seed(1)
train = sample(seq_len(nrow(data)), size = 4*nrow(data)/5)
data.train = data[train,]
data.test = data[-train,]
data.train.fit = select(data.train, -c("county", "state"))
ols = lm(deathspc ~. , data = data.train.fit)
r2.train = summary(ols)$r.sq
mse.train = mean(ols$residuals^2)
data.test.fit = select(data.test, -c("county", "state"))
pred.test = predict(ols, data.test.fit)
y.test = data.test.fit$deathspc
mse.test = mean((y.test - pred.test)^2)
rss = sum((y.test - pred.test)^2)
tss = sum((y.test - mean(y.test))^2)
r2.test = 1 - rss/tss
data.train.fit = select(data.train, -c("county", "state", "state_Wyoming"))
ols = lm(deathspc ~. , data = data.train.fit)
r2.train = summary(ols)$r.sq
mse.train = mean(ols$residuals^2)
data.test.fit = select(data.test, -c("county", "state"))
pred.test = predict(ols, data.test.fit)
y.test = data.test.fit$deathspc
mse.test = mean((y.test - pred.test)^2)
data.test.fit = select(data.test, -c("county", "state", "state_Wyoming"))
pred.test = predict(ols, data.test.fit)
y.test = data.test.fit$deathspc
mse.test = mean((y.test - pred.test)^2)
rss = sum((y.test - pred.test)^2)
tss = sum((y.test - mean(y.test))^2)
r2.test = 1 - rss/tss
summary(ols)
summary(state_Wisconsin)
summary(data.train$state_Wisconsin)
sum(data.train$state_Wisconsin)
rm(list=ls())
setwd("/Users/hongjingpeng/Desktop/Machine\ Learning/Machine-Learning-2022W/Lab3")
## Preparing Data ##
CovidData = read.csv("CovidData.csv")
vardes = read_excel("VariableDescription.xlsx")
## Data Analysis ##
## 1. Filter variables
oi = pull(vardes[vardes$Source == "Opportunity Insights", ], Variable) ## Opportunity Insights
oi_label = pull(vardes[vardes$Source == "Opportunity Insights", ], Description)
pmcovid = pull(vardes[vardes$Source == "PM_COVID", ], Variable) ## PM COVID
pmcovid_label = pull(vardes[vardes$Source == "PM_COVID", ], Description)
data = select(CovidData, c(county, state, deathspc, oi, pmcovid))
## 2. Descriptive statistics
stargazer(select(CovidData, c(oi)), digits = 2,
covariate.labels = c(oi_label), omit.summary.stat = c("p25", "p75"))
stargazer(select(CovidData, c(pmcovid)), digits = 2,
covariate.labels = c(pmcovid_label), omit.summary.stat = c("p25", "p75"))
## 3. Drop all observations with missing values.
data = na.omit(data)
## 4. Create dummies for states and the District of Columbia
data = dummy_cols(data, select_columns = "state")
set.seed(1)
train = sample(seq_len(nrow(data)), size = 4*nrow(data)/5)
data.train = data[train,]
data.test = data[-train,]
summary(data.train$state)
list(data.train$state)
describe(data.train$state)
data.train %>% count(state)
data = dummy_cols(data, select_columns = "state")
oi = pull(vardes[vardes$Source == "Opportunity Insights", ], Variable) ## Opportunity Insights
oi_label = pull(vardes[vardes$Source == "Opportunity Insights", ], Description)
pmcovid = pull(vardes[vardes$Source == "PM_COVID", ], Variable) ## PM COVID
pmcovid_label = pull(vardes[vardes$Source == "PM_COVID", ], Description)
data = select(CovidData, c(county, state, deathspc, oi, pmcovid))
## 2. Descriptive statistics
stargazer(select(CovidData, c(oi)), digits = 2,
covariate.labels = c(oi_label), omit.summary.stat = c("p25", "p75"))
stargazer(select(CovidData, c(pmcovid)), digits = 2,
covariate.labels = c(pmcovid_label), omit.summary.stat = c("p25", "p75"))
## 3. Drop all observations with missing values.
data = na.omit(data)
data = dummy_cols(data, select_columns = "state")
set.seed(1)
train = sample(seq_len(nrow(data)), size = 4*nrow(data)/5)
data.train = data[train,]
data.test = data[-train,]
data.train %>% count(state)
View(data)
data %>% count(state)
oi = pull(vardes[vardes$Source == "Opportunity Insights", ], Variable) ## Opportunity Insights
oi_label = pull(vardes[vardes$Source == "Opportunity Insights", ], Description)
pmcovid = pull(vardes[vardes$Source == "PM_COVID", ], Variable) ## PM COVID
pmcovid_label = pull(vardes[vardes$Source == "PM_COVID", ], Description)
data = select(CovidData, c(county, state, deathspc, oi, pmcovid))
data %>% count(state)
CovidData = read.csv("CovidData.csv")
vardes = read_excel("VariableDescription.xlsx")
## Data Analysis ##
## 1. Filter variables
oi = pull(vardes[vardes$Source == "Opportunity Insights", ], Variable) ## Opportunity Insights
oi_label = pull(vardes[vardes$Source == "Opportunity Insights", ], Description)
pmcovid = pull(vardes[vardes$Source == "PM_COVID", ], Variable) ## PM COVID
pmcovid_label = pull(vardes[vardes$Source == "PM_COVID", ], Description)
data = select(CovidData, c(county, state, deathspc, oi, pmcovid))
## 2. Descriptive statistics
stargazer(select(CovidData, c(oi)), digits = 2,
covariate.labels = c(oi_label), omit.summary.stat = c("p25", "p75"))
stargazer(select(CovidData, c(pmcovid)), digits = 2,
covariate.labels = c(pmcovid_label), omit.summary.stat = c("p25", "p75"))
## 3. Drop all observations with missing values.
data = na.omit(data)
## 4. Create dummies for states and the District of Columbia
data = dummy_cols(data, select_columns = "state")
set.seed(1)
train = sample(seq_len(nrow(data)), size = 4*nrow(data)/5)
data.train = data[train,]
data.test = data[-train,]
data.train %>% count(state)
ols = lm(deathspc ~ -1 , data = data.train.fit)
data.train.fit = select(data.train, -c("county", "state"))
ols = lm(deathspc ~ -1 , data = data.train.fit)
summary(ols)
ols = lm(deathspc ~ .-1 , data = data.train.fit)
summary(ols)
cor(data.train)
alias(data.train)
alias(ols)
alias(ols)
data.train.fit = select(data.train, -c("county", "state", "state_Wisconsin"))
ols = lm(deathspc ~ .-1 , data = data.train.fit)
summary(ols)
r2.train = summary(ols)$r.sq
mse.train = mean(ols$residuals^2)
data.test.fit = select(data.test, -c("county", "state", "state_Wyoming"))
pred.test = predict(ols, data.test.fit)
data.test.fit = select(data.test, -c("county", "state", "state_Wisconsin"))
pred.test = predict(ols, data.test.fit)
y.test = data.test.fit$deathspc
mse.test = mean((y.test - pred.test)^2)
rss = sum((y.test - pred.test)^2)
tss = sum((y.test - mean(y.test))^2)
r2.test = 1 - rss/tss
grid = 10^seq(2, -2, length=100)
y = data.train$deathspc
x = model.matrix(deathspc~., data.train.fit)[,-1]
ridge.mod=glmnet(x, y, alpha=0, lambda=grid) # glmnet() standardizes the variables by default
# b. 10-fold cross-validation
ridge.cv.out = cv.glmnet(x, y, alpha=0, lambda=grid)
# c.plot
plot(ridge.cv.out)
# d. choosing the optimal value
ridge.bestlam = ridge.cv.out$lambda.min
# e. re-estimate using the optimal lambda
ridge.bestmod = glmnet(x, y, alpha=0, lambda=ridge.bestlam)
## Lasso
# a. model estimation
lasso.mod=glmnet(x, y, alpha=1, lambda=grid)
# b. 10-fold cross-validation
lasso.cv.out = cv.glmnet(x, y, alpha=1, lambda=grid)
# c.plot
plot(lasso.cv.out)
# d. choosing the optimal value
lasso.bestlam = lasso.cv.out$lambda.min
# e. re-estimate using the optimal lambda
lasso.bestmod = glmnet(x, y, alpha=1, lambda=lasso.bestlam)
x.test = model.matrix(deathspc~., data.test.fit)[,-1]
## Ridge
ridge.pred = predict(ridge.bestmod, s = ridge.bestlam, newx =x.test)
mse.ridge = mean((ridge.pred - y.test)^2)
rss.ridge = sum((y.test - ridge.pred)^2)
r2.ridge = 1 - rss.ridge/tss
## Lasso
lasso.pred = predict(lasso.bestmod, s = lasso.bestlam, newx =x.test)
mse.lasso = mean((lasso.pred - y.test)^2)
rss.lasso = sum((y.test - lasso.pred)^2)
r2.lasso = 1 - rss.lasso/tss

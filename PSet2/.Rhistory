stargazer(model1, model2, model3, model4, type='latex',
omit.stat=c("ser", "f"), summary=FALSE, no.space=TRUE)
View(catholic)
1-0.01
1-(1-0.01)**100
1-(1-0.0001)**10000
x = seq(1, 100000, 1)
y = 1 - (1-1/x)**x
plot(x, y, type='l', col='red')
x = seq(1, 10, 1)
y = 1 - (1-1/x)**x
plot(x, y, type='l', col='red')
n = seq(1, 10, 1)
p = 1 - (1-1/n)**n
plot(n, p, type='l', col='red')
n = seq(1, 100000, 1)
p = 1 - (1-1/n)**n
plot(n, p, type='l', col='red')
plot(n, p, type='l', col='red', options(scipen=5))
plot(n, p, type='l', col='red', scipen=5)
library(wooldridge)
library(plyr)
library(stargazer)
data(catholic)
attach(catholic)
seted("/Users/hongjingpeng/Desktop/Machine\ Learning/Machine-Learning-2022W/PSet2")
library(wooldridge)
library(plyr)
library(stargazer)
data(catholic)
attach(catholic)
setwd("/Users/hongjingpeng/Desktop/Machine\ Learning/Machine-Learning-2022W/PSet2")
n = seq(1, 100000, 1)
p = 1 - (1-1/n)**n
plot(n, p, type='l', col='red', scipen=5)
png(file="output/q2-g.png",
width=600, height=350)
plot(n, p, type='l', col='red', scipen=5)
save(file="output/q2-g.png",
width=600, height=350)
png(file="output/q2-g.png",
width=600, height=350)
plot(n, p, type='l', col='red', scipen=5)
dev.off()
png(file="output/q2-g.png",
width=2000, height=800)
plot(n, p, type='l', col='red', scipen=5)
dev.off()
png(file="output/q2-g.png",
width=1000, height=400)
plot(n, p, type='l', col='red', scipen=5)
dev.off()
library(ggplot2)
n = seq(1, 100000, 1)
p = 1 - (1-1/n)**n
ggplot(n, p, type='l', col='red', scipen=5)
n = seq(1, 100000, 1)
p = function(n) {1 - (1-1/n)**n}
ggplot(data.frame(n=range(1, 100000)), aes(n=n))
+ stat_function(fun = f)
n = seq(1, 100000, 1)
p = function(n) {1 - (1-1/n)**n}
ggplot(data.frame(n=range(1, 100000)), aes(n=n))
+ stat_function(fun = p)
ggplot(data.frame(n=range(1, 100000)), aes(n=n)) + stat_function(fun = p)
n = seq(1, 100000, 1)
p = 1 - (1-1/n)**n
ggplot(data.frame(n=range(1, 100000)), aes(x=n, y=p))
n = seq(1, 100000, 1)
p = 1 - (1-1/n)**n
png(file="output/q2-g.png", width=2000, height=800, res=72)
plot(n, p, type='l', col='red', scipen=5)
dev.off()
n = seq(1, 100000, 1)
p = 1 - (1-1/n)**n
png(file="output/q2-g.png", width=2000, height=800, dpi=72)
plot(n, p, type='l', col='red', scipen=5)
dev.off()
n = seq(1, 100000, 1)
p = 1 - (1-1/n)**n
png(file="output/q2-g.png", width=2000, height=800, dpi=72)
plot(n, p, type='l', col='red', scipen=5)
dev.off()
png(file="output/q2-g.png", width=2000, height=800, res=96)
plot(n, p, type='l', col='red', scipen=5)
dev.off()
png(file="output/q2-g.png", width=1000, height=600, res=96)
plot(n, p, type='l', col='red', scipen=5)
dev.off()
store=rep(NA, 10000) > for(i in 1:10000){
store[i]=sum(sample(1:100, rep=TRUE)==4)>0 }
mean(store)
store=rep(NA, 10000)
for(i in 1:10000){
store[i]=sum(sample(1:100, rep=TRUE)==4)>0
}
mean(store)
store=rep(NA, 10000)
for(i in 1:10000){
store[i]=sum(sample(1:100, rep=TRUE)==4)>0
}
mean(store)
store=rep(NA, 10000)
for(i in 1:10000){
store[i]=sum(sample(1:100, rep=TRUE)==4)>0
}
mean(store)
set.seed(1)
y=rnorm(100)
x=rnorm(100)
y=x-2*x^2+rnorm(100)
x
plot(x, y, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
plot(x, y, xlab="X", ylab="Y", pch=19)
plot(x, y, xlab="X", ylab="Y", pch=19, color='red')
set.seed(1)
plot(x, y, xlab="X", ylab="Y", pch=19, col='red')
plot(x, y, xlab="X", ylab="Y", col='red')
png(file="output/q8-b.png", width=1000, height=600, res=96)
plot(x, y, xlab="X", ylab="Y", col='red')
dev.off()
library(boot)
loocv.error=rep(0,5)
for (i in 1:5){
glm.fit=glm(y~(x,i))
loocv.error[i]=cv.glm(glm.fit)$delta[1]
}
loocv.error
loocv.error=rep(0,5)
for (i in 1:5){
glm.fit=glm(y~poly(x,i))
loocv.error[i]=cv.glm(glm.fit)$delta[1]
}
loocv.error
df=data.frame(x,y)
df=data.frame(x,y)
loocv.error=rep(0,5)
for (i in 1:5){
glm.fit=glm(y~poly(x,i), data=df)
loocv.error[i]=cv.glm(df, glm.fit)$delta[1]
}
loocv.error
df=data.frame(x,y)
loocv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y~poly(x,i), data=df)
loocv.error[i]=cv.glm(df, glm.fit)$delta[1]
}
loocv.error
df=data.frame(x,y)
loocv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y~poly(x,i), data=df)
loocv.error[i]=cv.glm(df, glm.fit, K=1)$delta[1]
}
loocv.error
df=data.frame(x,y)
loocv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y~poly(x,i), data=df)
loocv.error[i]=cv.glm(df, glm.fit, K=2)$delta[1]
}
loocv.error
set.seed(1)
df=data.frame(x,y)
loocv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y~poly(x,i), data=df)
loocv.error[i]=cv.glm(df, glm.fit)$delta[1]
}
loocv.error
set.seed(2)
df=data.frame(x,y)
loocv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y~poly(x,i), data=df)
loocv.error[i]=cv.glm(df, glm.fit)$delta[1]
}
loocv.error
set.seed(100)
df=data.frame(x,y)
loocv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y~poly(x,i), data=df)
loocv.error[i]=cv.glm(df, glm.fit)$delta[1]
}
loocv.error
set.seed(100)
df=data.frame(x,y)
loocv.error1=rep(0,4)
for (i in 1:4){
glm.fit=glm(y~poly(x,i), data=df)
loocv.error1[i]=cv.glm(df, glm.fit)$delta[1]
}
loocv.error1
set.seed(100)
df=data.frame(x,y)
loocv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y~poly(x,i), data=df)
loocv.error[i]=cv.glm(df, glm.fit)$delta[1]
}
loocv.error
model=rep(0,4)
for (i in 1:4){
glm.fit=glm(y~poly(x,i), data=df)
model[i]=glm.fit
}
glm.fit1=glm(y~poly(x,1), data=df)
glm.fit2=glm(y~poly(x,2), data=df)
glm.fit3=glm(y~poly(x,3), data=df)
glm.fit4=glm(y~poly(x,4), data=df)
stargazer(glm.fit1, glm.fit2, glm.fit3, glm.fit4, type='latex',
omit.stat=c("ser", "f"), summary=FALSE, no.space=TRUE)
stargazer(glm.fit1, glm.fit2, glm.fit3, glm.fit4, type='latex', summary=FALSE, no.space=TRUE)
glm.fit1=glm(y~poly(x,1)-1, data=df)
glm.fit2=glm(y~poly(x,2), data=df)
glm.fit3=glm(y~poly(x,3), data=df)
glm.fit4=glm(y~poly(x,4), data=df)
stargazer(glm.fit1, glm.fit2, glm.fit3, glm.fit4, type='latex', summary=FALSE, no.space=TRUE)
glm.fit1=glm(y~poly(x,1)-1, data=df)
glm.fit2=glm(y~poly(x,2)-1, data=df)
glm.fit3=glm(y~poly(x,3)-1, data=df)
glm.fit4=glm(y~poly(x,4)-1, data=df)
stargazer(glm.fit1, glm.fit2, glm.fit3, glm.fit4, type='latex', summary=FALSE, no.space=TRUE)
df=data.frame(x,y)
glm.fit1=glm(y~poly(x,1), data=df)
glm.fit2=glm(y~poly(x,2), data=df)
glm.fit3=glm(y~poly(x,3), data=df)
glm.fit4=glm(y~poly(x,4), data=df)
stargazer(glm.fit1, glm.fit2, glm.fit3, glm.fit4, type='latex', summary=FALSE, no.space=TRUE)
plot(x, y, xlab="X", ylab="Y", col='red')
plot(x, -1.828+2.316*x-21.059*x**2)
plot(x, y, xlab="X", ylab="Y", col='red')
+plot(x, -1.828+2.316*x-21.059*x**2)
plot(x, y, xlab="X", ylab="Y", col='red')
+line(x, -1.828+2.316*x-21.059*x**2)
plot(x, y, xlab="X", ylab="Y", col='red')
lines(x, -1.828+2.316*x-21.059*x**2)
glm.fit2=glm(y~poly(x,2), data=df)
summary(glm.fit2)
x=rnorm(10000)
y=x-2*x^2+rnorm(10000)
df=data.frame(x,y)
glm.fit1=glm(y~poly(x,1), data=df)
glm.fit2=glm(y~poly(x,2), data=df)
summary(glm.fit2)
set.seed(1)
x=rnorm(10000)
y=x-2*x^2+rnorm(10000)
df=data.frame(x,y)
glm.fit1=glm(y~poly(x,1), data=df)
glm.fit2=glm(y~poly(x,2), data=df)
summary(glm.fit2)
set.seed(2)
x=rnorm(10000)
y=x-2*x^2+rnorm(10000)
df=data.frame(x,y)
glm.fit1=glm(y~poly(x,1), data=df)
glm.fit2=glm(y~poly(x,2), data=df)
summary(glm.fit2)
library(MASS)
data(Boston)
data(Boston)
attach(Boston)
rm(list=())
##########################
rm(list=ls())
data(Boston)
attach(Boston)
print(Boston)
rm(list=ls())
print(Boston)
rm(list=ls())
data(Boston)
force(Boston)
force(Boston)
## Housekeeping ##
library(wooldridge)
library(plyr)
library(stargazer)
library(ggplot2)
library(boot)
library(MASS)
setwd("/Users/hongjingpeng/Desktop/Machine\ Learning/Machine-Learning-2022W/PSet2")
#####################
## PSet Question 2 ##
#####################
## Data Preparing ##
data(catholic)
attach(catholic)
female = as.factor(female)
gender = revalue(female, c("1" = "female", "0" = "male"))
hsgrad = as.factor(hsgrad)
hs = revalue(hsgrad, c("1" = "highschool", "0" = "no_highschool"))
## Data Analysis ##
model1 = lm(read12 ~ gender)
model2 = lm(read12 ~ gender - 1)
model3 = lm(read12 ~ gender*hs)
model4 = lm(read12 ~ gender*lfaminc)
stargazer(model1, model2, model3, model4, type='latex',
omit.stat=c("ser", "f"), summary=FALSE, no.space=TRUE)
##########################
## Chapter 5 Exercise 2 ##
##########################
## Question(g) ##
n = seq(1, 100000, 1)
p = 1 - (1-1/n)**n
png(file="output/q2-g.png", width=1000, height=600, res=96)
plot(n, p, type='l', col='red', scipen=5)
dev.off()
## Question(h) ##
store=rep(NA, 10000)
for(i in 1:10000){
store[i]=sum(sample(1:100, rep=TRUE)==4)>0
}
mean(store)
##########################
## Chapter 5 Exercise 8 ##
##########################
## (a) Generate a simulated data set
set.seed(1)
y=rnorm(100)
x=rnorm(100)
y=x-2*x^2+rnorm(100)
## (b) Scatter plot of X against Y
png(file="output/q8-b.png", width=1000, height=600, res=96)
plot(x, y, xlab="X", ylab="Y", col='red')
dev.off()
## (c) LOOCV
set.seed(1)
df=data.frame(x,y)
loocv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y~poly(x,i), data=df)
loocv.error[i]=cv.glm(df, glm.fit)$delta[1]
}
loocv.error
## (d) LOOCV using another random seed
set.seed(100)
df=data.frame(x,y)
loocv.error=rep(0,4)
for (i in 1:4){
glm.fit=glm(y~poly(x,i), data=df)
loocv.error[i]=cv.glm(df, glm.fit)$delta[1]
}
loocv.error
## (f) Statistical significance of the coefficient estimates
df=data.frame(x,y)
glm.fit1=glm(y~poly(x,1), data=df)
glm.fit2=glm(y~poly(x,2), data=df)
glm.fit3=glm(y~poly(x,3), data=df)
glm.fit4=glm(y~poly(x,4), data=df)
stargazer(glm.fit1, glm.fit2, glm.fit3, glm.fit4, type='latex', summary=FALSE, no.space=TRUE)
data(Boston)
View(catholic)
rm(list=ls())
data(Boston)
mean(Boston$medv)
se(Boston$medv)
sd(Boston$medv)
sd.medv=sd(Boston$medv)
se.medv=sd.medv/sqrt(nrow(Boston))
se.medv
9.197104/ sqrt(506)
mu.fn=function(data, index){
return(mean(data$medv))
}
mu.fn(Boston, 1:100)
mu.fn=function(data, index){
return(mean(data$medv))
}
mu.fn(Boston)
mu.fn=function(data, index){
return(mean(data$medv[index]))
}
mu.fn(Boston)
mu.fn(Boston, 1:100)
mu.fn(Boston, 1:500)
mu.fn(Boston, 1:501)
mu.fn(Boston, 1:503)
mu.fn(Boston, 1:507)
mu.fn(Boston, 1:506)
set.seed(1)
boot(Boston, alpha.fn, R=1000)
set.seed(1)
boot(Boston, mu.fn, R=1000)
set.seed(1)
boot(Boston, mu.fn, R=10)
set.seed(1)
boot(Boston, mu.fn, R=100000)
set.seed(1)
boot(Boston, mu.fn, R=1000)
set.seed(1)
boot(Boston, mu.fn, R=1000)
22.53281-2*0.4106622
22.53281+2*0.4106622
t.test(Boston$medv)
median(Boston$medv)
median.fn=function(data, index){
return(median(data$medv[index]))
}
## Bootstrap
set.seed(1)
boot(Boston, median.fn, R=1000)
median.fn=function(data, index){
return(median(data$medv[index]))
}
## Bootstrap
set.seed(1)
boot(Boston, median.fn, R=10000)
median.fn=function(data, index){
return(median(data$medv[index]))
}
## Bootstrap
set.seed(1)
boot(Boston, median.fn, R=1000)
quantile(Boston$medv)
quantile(Boston$medv, probs = c(0.1,0.9))
quantile(Boston$medv, probs = c(0.1))
quantile10.fn=function(data, index){
return(quantile(data$medv[index], probs = c(0.1)))
}
## Bootstrap
set.seed(1)
boot(Boston, quantile10.fn, R=1000)
x1=rnorm(100)
f1=x1**2-x1
x2=rnorm(100)
f2=-x2**2-x2
y=f1+2f2+rnorm(100)
lm(y~f1+f2)
x1=rnorm(100)
f1=x1**2-x1
x2=rnorm(100)
f2=-x2**2-x2
y=f1+2*f2+rnorm(100)
lm(y~f1+f2)
lm(y~x1+x2)
x1=rnorm(100)
f1=x1**2-x1
x2=rnorm(100)
f2=-x2**2+x2
y=f1+2*f2+rnorm(100)
lm(y~f1+f2)
lm(y~x1+x2)
x1=rnorm(100)
f1=x1**2-x1
x2=rnorm(100)
f2=x2**2+x2
y=f1+2*f2+rnorm(100)
lm(y~f1+f2)
lm(y~x1+x2)
x1=rnorm(100)
f1=x1**2-x1
x2=rnorm(100)
f2=-x2**2+x2
y=f1+2*f2+rnorm(100)
lm(y~f1+f2)
lm(y~x1+x2)
x1=rnorm(100)
f1=x1**2-x1
x2=rnorm(100)
f2=x2**2-x2
y=f1+2*f2+rnorm(100)
lm(y~f1+f2)
lm(y~x1+x2)
x1=rnorm(100)
f1=-x1**2-x1
x2=rnorm(100)
f2=x2**2-x2
y=f1+2*f2+rnorm(100)
lm(y~f1+f2)
lm(y~x1+x2)
x1=rnorm(1000)
f1=-x1**2-x1
x2=rnorm(1000)
f2=x2**2-x2
y=f1+2*f2+rnorm(1000)
lm(y~f1+f2)
lm(y~x1+x2)
x1=rnorm(1000)
f1=-x1**2-x1
x2=rnorm(1000)
f2=x2**2-x2
y=f1+2*f2+rnorm(1000)
model.true=lm(y~f1+f2)
model.linear=lm(y~x1+x2)
stargazer(model.true, model.linear, type='latex',
omit.stat=c("ser", "f"), summary=FALSE, no.space=TRUE)
library(ggfortify)
install.packages("ggfortify")
par(mfrow = c(2, 2))
autoplot(model.linear)
plot(model.linear)
par(mfrow = c(2, 2))
plot(model.linear)
plot(model.linear, 1)
##
plot(model.linear, 1)
par(mar=c(1,1,1,1))
plot(model.linear, 1)
plot(model.linear, 1)
plot(model.linear, 1)
plot(model.linear, 1)
plot(model.linear, 1)
par(mfrow=c(1,1))
plot(model.linear, 1)
png(file="output/q1.png", width=1000, height=600, res=96)
plot(model.linear, 1)
dev.off()

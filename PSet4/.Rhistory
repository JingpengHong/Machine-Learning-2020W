}
i=i+1
}
plot(prob_error[2,],type="l",pch=18, col="black",
main="Probability of false rejection versus p", xlab="p",ylim=c(0,0.05)
ylab="Type I Error", lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(prob_error[2,],type="l",pch=18, col="black",
main="Probability of false rejection versus p", xlab="p",ylim=c(0,0.05),
ylab="Type I Error", lwd=2)
lines(prob_error[3,],type="l",col="red",lwd=2)
lines(prob_error[4,],type="l",col="purple",lwd=2)
lines(prob_error[5,],type="l",col="green",lwd=2)
lines(prob_error[6,],type="l",col="orange",lwd=2)
lines(1-(1-(1-0.95)/p)**p,type="l",col="blue",lwd=2)
legend("topright",legend=c("rho=0.","rho=0.2","rho=0.4","rho=0.6","rho=0.8","1.a"),
col=c("black","red","purple","green","orange","blue"), lty=1,lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(prob_error[2,],type="l",pch=18, col="black",
main="Probability of false rejection versus p", xlab="p",ylim=c(0,0.05),
ylab="Type I Error", lwd=2)
lines(prob_error[3,],type="l",col="red",lwd=2)
lines(prob_error[4,],type="l",col="purple",lwd=2)
lines(prob_error[5,],type="l",col="green",lwd=2)
lines(prob_error[6,],type="l",col="orange",lwd=2)
lines(p, 1-(1-(1-0.95)/p)**p,type="l",col="blue",lwd=2)
legend("topright",legend=c("rho=0.","rho=0.2","rho=0.4","rho=0.6","rho=0.8","1.a"),
col=c("black","red","purple","green","orange","blue"), lty=1,lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(prob_error[2,],type="l",pch=18, col="black",
main="Probability of false rejection versus p", xlab="p",ylim=c(0,0.055),
ylab="Type I Error", lwd=2)
lines(prob_error[3,],type="l",col="red",lwd=2)
lines(prob_error[4,],type="l",col="purple",lwd=2)
lines(prob_error[5,],type="l",col="green",lwd=2)
lines(prob_error[6,],type="l",col="orange",lwd=2)
lines(p, 1-(1-(1-0.95)/p)**p,type="l",col="blue",lwd=2)
legend("topright",legend=c("rho=0.","rho=0.2","rho=0.4","rho=0.6","rho=0.8","1.a"),
col=c("black","red","purple","green","orange","blue"), lty=1,lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p, 1-(1-(1-0.95)/p)**p,
main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0,0.05), col="blue")
lines(prob_error[3,],type="l",col="red",lwd=2)
lines(prob_error[4,],type="l",col="purple",lwd=2)
lines(prob_error[5,],type="l",col="green",lwd=2)
lines(prob_error[6,],type="l",col="orange",lwd=2)
legend("topright",legend=c("rho=0.","rho=0.2","rho=0.4","rho=0.6","rho=0.8","1.a"),
col=c("black","red","purple","green","orange","blue"), lty=1,lwd=2)
p=seq(1, 10, by=1)
plot(p, 1-(1-(1-0.95)/p)**p,
main="Probability of false rejection versus p (0.95, Bonferroni correction)", ylab="Type I Error", type="l", col="blue")
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p, 1-(1-(1-0.95)/p)**p,
main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0,0.05), col="blue")
lines(prob_error[3,],type="l",col="red",lwd=2)
lines(prob_error[4,],type="l",col="purple",lwd=2)
lines(prob_error[5,],type="l",col="green",lwd=2)
lines(prob_error[6,],type="l",col="orange",lwd=2)
legend("topright",legend=c("rho=0.","rho=0.2","rho=0.4","rho=0.6","rho=0.8","1.a"),
col=c("black","red","purple","green","orange","blue"), lty=1,lwd=2)
p1=seq(1, 10, by=1)
plot(p1, 1-(1-(1-0.95)/p1)**p1,
main="Probability of false rejection versus p (0.95, Bonferroni correction)", ylab="Type I Error", type="l", col="blue")
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p1, 1-(1-(1-0.95)/p1)**p1, main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0,0.05), col="blue")
lines(prob_error[3,],type="l",col="red",lwd=2)
lines(prob_error[4,],type="l",col="purple",lwd=2)
lines(prob_error[5,],type="l",col="green",lwd=2)
lines(prob_error[6,],type="l",col="orange",lwd=2)
legend("topright",legend=c("rho=0.","rho=0.2","rho=0.4","rho=0.6","rho=0.8","1.a"),
col=c("black","red","purple","green","orange","blue"), lty=1,lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
rho_ls
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p1, 1-(1-(1-0.95)/p1)**p1, main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0,0.05), col="blue")
lines(prob_error[3,],type="l",col="red")
lines(prob_error[4,],type="l",col="purple")
lines(prob_error[5,],type="l",col="green")
lines(prob_error[6,],type="l",col="orange")
legend("topright",legend=c("1.a", "rho=0.","rho=0.2","rho=0.4","rho=0.6","rho=0.8"),
col=c("blue","red","purple","green","orange","black"), lty=1,lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p1, 1-(1-(1-0.95)/p1)**p1, main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0,0.05), col="blue")
lines(prob_error[2,],type="l",col="red")
lines(prob_error[3,],type="l",col="purple")
lines(prob_error[4,],type="l",col="green")
lines(prob_error[5,],type="l",col="orange")
legend("topright",legend=c("1.a", "rho=0.2","rho=0.4","rho=0.6","rho=0.8","rho=1.0"),
col=c("blue","red","purple","green","orange","black"), lty=1,lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p1, 1-(1-(1-0.95)/p1)**p1, main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0.01,0.05), col="blue")
lines(prob_error[2,],type="l",col="red")
lines(prob_error[3,],type="l",col="purple")
lines(prob_error[4,],type="l",col="green")
lines(prob_error[5,],type="l",col="orange")
legend("bottomleft",legend=c("1.a", "rho=0.2","rho=0.4","rho=0.6","rho=0.8","rho=1.0"),
col=c("blue","red","purple","green","orange","black"), lty=1,lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p1, 1-(1-(1-0.95)/p1)**p1, main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0.02,0.05), col="blue")
lines(prob_error[2,],type="l",col="red")
lines(prob_error[3,],type="l",col="purple")
lines(prob_error[4,],type="l",col="green")
lines(prob_error[5,],type="l",col="orange")
legend("bottomleft",legend=c("1.a", "rho=0.2","rho=0.4","rho=0.6","rho=0.8","rho=1.0"),
col=c("blue","red","purple","green","orange","black"), lty=1,lwd=2)
plot(density(pvalue))
test.mat=model.matrix(Salary~.,data=Hitters[test,])
mse.test=rep(NA,3)
# MSE in c
coefc=coef(summary(reg.train))[order(pvalue, decreasing=FALSE)][1:7]
predc=test.mat[,names(sort(pvalue, decreasing=FALSE)[1:7])]%*%coefc
reg.train=glm(Salary~., data=Hitters[train,])
pvalue=coef(summary(reg.train))[, 4]
pvalue=sort(pvalue, decreasing=FALSE)
test.mat=model.matrix(Salary~.,data=Hitters[test,])
mse.test=rep(NA,3)
# MSE in c
coefc=coef(summary(reg.train))[order(pvalue, decreasing=FALSE)][1:7]
predc=test.mat[,names(sort(pvalue, decreasing=FALSE)[1:7])]%*%coefc
mse.test[1]=mean((Hitters$Salary[test]-predc)^2)
# MSE in d
coefd=coef(regfit.train.fwd, id=7)
predd=test.mat[,names(coefd)]%*%coefd
mse.test[2]=mean((Hitters$Salary[test]-predd)^2)
# MSE in e
coefe=coef(regfit.train, id=7)
prede=test.mat[,names(coefe)]%*%coefe
mse.test[3]=mean((Hitters$Salary[test]-prede)^2)
mse.test
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(leaps)
library(data.table)
setwd("/Users/hongjingpeng/Desktop/Machine Learning/Machine-Learning-2022W/PSet1")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(leaps)
library(data.table)
setwd("/Users/hongjingpeng/Desktop/Machine Learning/Machine-Learning-2022W/PSet1")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(leaps)
library(data.table)
setwd("/Users/hongjingpeng/Desktop/Machine Learning/Machine-Learning-2022W/PSet1")
library(tm)
library(dplyr)
# install.packages("SnowballC")
library(SnowballC)
# install.packages("wordcloud")
library(wordcloud)
# install.packages("topicmodels")
library(topicmodels)
# install.packages("tidytext")
library(tidytext)
# install.packages("reshape2")
library(reshape2)
library(ggplot2)
library(e1071)
library(ISLR)
# install.packages("caret")
library(caret)
# install.packages("eList")
library(eList)
rm(list=ls())
setwd("/Users/hongjingpeng/Desktop/Machine\ Learning/Machine-Learning-2022W/PSet4")
Auto = Auto
# Create a median-split binary variable for gas mileage
Auto$mpg2 = ifelse(Auto$mpg>median(Auto$mpg), 1, 0) %>%
as.factor()
set.seed(1)
tune.out = tune(svm, mpg2~., data=Auto, kernel="linear",
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune.out)
# best cost value
bestmod = tune.out$best.model
ypred = predict(bestmod, Auto)
table(predict = ypred, truth = Auto$mpg2)
svmfit.linear = svm(y~., data = Auto, kernel = "linear", cost = 1, scale = FALSE)
svmfit.linear = svm(mpg2~., data = Auto, kernel = "linear", cost = 1, scale = FALSE)
View(Auto)
plot = function(svmfit) {
for (var in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
png(file=paste("output/Q4", svmfit, var, ".png", sep = ""), width=2000, height=1200, res=200)
plot(svmfit, data = Auto, as.formula(paste("mpg~", var, sep = "")))
dev.off()
}
}
svmfit.linear = svm(mpg2~., data = Auto, kernel = "linear", cost = 1, scale = FALSE)
plot(svm.linear)
plot(svmfit.linear)
plot = function(svmfit) {
for (var in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
# png(file=paste("output/Q4", svmfit, var, ".png", sep = ""), width=2000, height=1200, res=200)
plot(svmfit, data = Auto, as.formula(paste("mpg~", var, sep = "")))
# dev.off()
}
}
## linear
svmfit.linear = svm(mpg2~., data = Auto, kernel = "linear", cost = 1, scale = FALSE)
plot(svmfit.linear)
plot = function(svmfit) {
for (var in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
# png(file=paste("output/Q4", svmfit, var, ".png", sep = ""), width=2000, height=1200, res=200)
plot(svmfit, Auto, as.formula(paste("mpg~", var, sep = "")))
# dev.off()
}
}
## linear
svmfit.linear = svm(mpg2~., data = Auto, kernel = "linear", cost = 1, scale = FALSE)
plot(svmfit.linear)
plot = function(svmfit) {
for (var in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
# png(file=paste("output/Q4", svmfit, var, ".png", sep = ""), width=2000, height=1200, res=200)
plot(svmfit, Auto, as.formula(paste("mpg~", var, sep = "")))
# dev.off()
}
}
## linear
svmfit.linear = svm(mpg2~., data = Auto, kernel = "linear", cost = 1, scale = FALSE)
plot(svmfit.linear)
h = as.formula(paste("mpg~", "mpg2", sep = ""))
svmfit.linear = svm(mpg2~., data = Auto, kernel = "linear", cost = 1)
plot(svmfit.linear)
svmfit.linear = svm(mpg2~., data = Auto, kernel = "linear", cost = 1)
plot(svmfit.linear, Auto, as.formula(paste("mpg~", "horsepower", sep = "")))
plot(svmfit.linear, Auto, mpg~horsepower)
plot(svmfit.linear, Auto, mpg2~horsepower)
plot(svmfit.linear, Auto, mpg2~horsepower)
plotvar(svmfit.linear, Auto, mpg2~horsepower)
plotvar = function(svmfit) {
for (var in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
# png(file=paste("output/Q4", svmfit, var, ".png", sep = ""), width=2000, height=1200, res=200)
plot(svmfit, Auto, as.formula(paste("mpg~", var, sep = "")))
# dev.off()
}
}
svmfit.linear = svm(mpg2~., data = Auto, kernel = "linear", cost = 1)
plotvar(svmfit.linear, Auto, mpg2~horsepower)
View(plot)
rm(list=ls())
Auto = Auto
# Create a median-split binary variable for gas mileage
Auto$mpg2 = ifelse(Auto$mpg>median(Auto$mpg), 1, 0) %>%
as.factor()
plotvar = function(svmfit) {
for (var in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
# png(file=paste("output/Q4", svmfit, var, ".png", sep = ""), width=2000, height=1200, res=200)
plot(svmfit, Auto, as.formula(paste("mpg~", var, sep = "")))
# dev.off()
}
}
svmfit.linear = svm(mpg2~., data = Auto, kernel = "linear", cost = 1)
plotvar(svmfit.linear, Auto, mpg2~horsepower)
svm.linear = svm(mpg2 ~ ., data = Auto, kernel = "linear", cost = 1)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotpairs(svm.linear)
plotpairs(svm.linear)
png(file=paste("output/Q4", svmfit, var, ".png", sep = ""), width=2000, height=1200, res=200)
plot(svmfit, Auto, as.formula(paste("mpg~", var, sep = "")))
plotpairs(svm.linear)
dev.off()
png("output/Q4_d.png", width=2000, height=1200, res=200)
plotpairs(svm.linear)
dev.off()
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")), col = c("orange", "white"))
}
}
png("output/Q4_d.png", width=2000, height=1200, res=200)
plotpairs(svm.linear)
dev.off()
png("output/Q4_d.png", width=2000, height=1200, res=128)
plotpairs(svm.linear)
dev.off()
plotvar = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
png(file=paste("output/Q4", fit, name, ".png", sep = ""), width=2000, height=1200, res=200)
plot(fit, Auto, as.formula(paste("mpg~", var, sep = "")), col = c("orange", "white"))
dev.off()
}
}
svmfit.linear = svm(mpg2~., data = Auto, kernel = "linear", cost = 1)
plotvar(svmfit.linear)
plotvar = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
png(file=paste("output/Q4", fit, name, ".png", sep = ""), width=2000, height=1200, res=200)
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")), col = c("orange", "white"))
dev.off()
}
}
## linear
svmfit.linear = svm(mpg2~., data = Auto, kernel = "linear", cost = 1)
plotvar(svmfit.linear)
svmfit.radial = svm(mpg2~., data = Auto, kernel = "radial", cost = 10, gamma = 0.01)
plotvar(svmfit.radial)
## polynomial
svmfit.poly = svm(mpg2~., data = Auto, kernel = "polynomial", cost = 10, degree = 2)
plotvar(svmfit.radial)
svmfit.poly = svm(mpg2~., data = Auto, kernel = "polynomial", cost = 10, degree = 2)
plotvar(svmfit.poly)
plotvar = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
png(file=paste("output/Q41", name, ".png", sep = ""), width=2000, height=1200, res=200)
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")), col = c("orange", "white"))
dev.off()
}
}
## linear
svmfit.linear = svm(mpg2~., data = Auto, kernel = "linear", cost = 1)
plotvar(svmfit.linear)
plotvar = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
png(file=paste("output/Q42", name, ".png", sep = ""), width=2000, height=1200, res=200)
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")), col = c("orange", "white"))
dev.off()
}
}
svmfit.radial = svm(mpg2~., data = Auto, kernel = "radial", cost = 10, gamma = 0.01)
plotvar(svmfit.radial)
plotvar = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpg2", "name"))]) {
png(file=paste("output/Q43", name, ".png", sep = ""), width=2000, height=1200, res=200)
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")), col = c("orange", "white"))
dev.off()
}
}
svmfit.poly = svm(mpg2~., data = Auto, kernel = "polynomial", cost = 10, degree = 2)
plotvar(svmfit.poly)

lines(prob_error[3,],type="l",col="red",lwd=2)
lines(prob_error[4,],type="l",col="purple",lwd=2)
lines(prob_error[5,],type="l",col="green",lwd=2)
lines(prob_error[6,],type="l",col="orange",lwd=2)
lines(p, 1-(1-(1-0.95)/p)**p,type="l",col="blue",lwd=2)
legend("topright",legend=c("rho=0.","rho=0.2","rho=0.4","rho=0.6","rho=0.8","1.a"),
col=c("black","red","purple","green","orange","blue"), lty=1,lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p, 1-(1-(1-0.95)/p)**p,
main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0,0.05), col="blue")
lines(prob_error[3,],type="l",col="red",lwd=2)
lines(prob_error[4,],type="l",col="purple",lwd=2)
lines(prob_error[5,],type="l",col="green",lwd=2)
lines(prob_error[6,],type="l",col="orange",lwd=2)
legend("topright",legend=c("rho=0.","rho=0.2","rho=0.4","rho=0.6","rho=0.8","1.a"),
col=c("black","red","purple","green","orange","blue"), lty=1,lwd=2)
p=seq(1, 10, by=1)
plot(p, 1-(1-(1-0.95)/p)**p,
main="Probability of false rejection versus p (0.95, Bonferroni correction)", ylab="Type I Error", type="l", col="blue")
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p, 1-(1-(1-0.95)/p)**p,
main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0,0.05), col="blue")
lines(prob_error[3,],type="l",col="red",lwd=2)
lines(prob_error[4,],type="l",col="purple",lwd=2)
lines(prob_error[5,],type="l",col="green",lwd=2)
lines(prob_error[6,],type="l",col="orange",lwd=2)
legend("topright",legend=c("rho=0.","rho=0.2","rho=0.4","rho=0.6","rho=0.8","1.a"),
col=c("black","red","purple","green","orange","blue"), lty=1,lwd=2)
p1=seq(1, 10, by=1)
plot(p1, 1-(1-(1-0.95)/p1)**p1,
main="Probability of false rejection versus p (0.95, Bonferroni correction)", ylab="Type I Error", type="l", col="blue")
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p1, 1-(1-(1-0.95)/p1)**p1, main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0,0.05), col="blue")
lines(prob_error[3,],type="l",col="red",lwd=2)
lines(prob_error[4,],type="l",col="purple",lwd=2)
lines(prob_error[5,],type="l",col="green",lwd=2)
lines(prob_error[6,],type="l",col="orange",lwd=2)
legend("topright",legend=c("rho=0.","rho=0.2","rho=0.4","rho=0.6","rho=0.8","1.a"),
col=c("black","red","purple","green","orange","blue"), lty=1,lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
rho_ls
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p1, 1-(1-(1-0.95)/p1)**p1, main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0,0.05), col="blue")
lines(prob_error[3,],type="l",col="red")
lines(prob_error[4,],type="l",col="purple")
lines(prob_error[5,],type="l",col="green")
lines(prob_error[6,],type="l",col="orange")
legend("topright",legend=c("1.a", "rho=0.","rho=0.2","rho=0.4","rho=0.6","rho=0.8"),
col=c("blue","red","purple","green","orange","black"), lty=1,lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p1, 1-(1-(1-0.95)/p1)**p1, main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0,0.05), col="blue")
lines(prob_error[2,],type="l",col="red")
lines(prob_error[3,],type="l",col="purple")
lines(prob_error[4,],type="l",col="green")
lines(prob_error[5,],type="l",col="orange")
legend("topright",legend=c("1.a", "rho=0.2","rho=0.4","rho=0.6","rho=0.8","rho=1.0"),
col=c("blue","red","purple","green","orange","black"), lty=1,lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p1, 1-(1-(1-0.95)/p1)**p1, main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0.01,0.05), col="blue")
lines(prob_error[2,],type="l",col="red")
lines(prob_error[3,],type="l",col="purple")
lines(prob_error[4,],type="l",col="green")
lines(prob_error[5,],type="l",col="orange")
legend("bottomleft",legend=c("1.a", "rho=0.2","rho=0.4","rho=0.6","rho=0.8","rho=1.0"),
col=c("blue","red","purple","green","orange","black"), lty=1,lwd=2)
N=20000
rho_ls=seq(0, 1, by=0.2)
p_ls=seq(1, 10, by=1)
prob_error=matrix(NA, nrow = length(rho_ls), ncol = length(p_ls))
i=1
for (rho in rho_ls) {
j=1
for (p in p_ls){
covmat=matrix(rep(rho, p*p), nrow=p, byrow=TRUE)
diag(covmat)=1
z=mvrnorm(n=N, mu=rep(0, p), Sigma=covmat)
c_value=qnorm(0.05/p,lower.tail = FALSE)
rej=z>c_value
rejcol=(rowSums(rej)==0)
prob_error[i,j]=1-sum(rejcol)/N
j=j+1
}
i=i+1
}
plot(p1, 1-(1-(1-0.95)/p1)**p1, main="Probability of false rejection versus p", ylab="Type I Error", type="l", xlab="p",ylim=c(0.02,0.05), col="blue")
lines(prob_error[2,],type="l",col="red")
lines(prob_error[3,],type="l",col="purple")
lines(prob_error[4,],type="l",col="green")
lines(prob_error[5,],type="l",col="orange")
legend("bottomleft",legend=c("1.a", "rho=0.2","rho=0.4","rho=0.6","rho=0.8","rho=1.0"),
col=c("blue","red","purple","green","orange","black"), lty=1,lwd=2)
plot(density(pvalue))
test.mat=model.matrix(Salary~.,data=Hitters[test,])
mse.test=rep(NA,3)
# MSE in c
coefc=coef(summary(reg.train))[order(pvalue, decreasing=FALSE)][1:7]
predc=test.mat[,names(sort(pvalue, decreasing=FALSE)[1:7])]%*%coefc
reg.train=glm(Salary~., data=Hitters[train,])
pvalue=coef(summary(reg.train))[, 4]
pvalue=sort(pvalue, decreasing=FALSE)
test.mat=model.matrix(Salary~.,data=Hitters[test,])
mse.test=rep(NA,3)
# MSE in c
coefc=coef(summary(reg.train))[order(pvalue, decreasing=FALSE)][1:7]
predc=test.mat[,names(sort(pvalue, decreasing=FALSE)[1:7])]%*%coefc
mse.test[1]=mean((Hitters$Salary[test]-predc)^2)
# MSE in d
coefd=coef(regfit.train.fwd, id=7)
predd=test.mat[,names(coefd)]%*%coefd
mse.test[2]=mean((Hitters$Salary[test]-predd)^2)
# MSE in e
coefe=coef(regfit.train, id=7)
prede=test.mat[,names(coefe)]%*%coefe
mse.test[3]=mean((Hitters$Salary[test]-prede)^2)
mse.test
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(leaps)
library(data.table)
setwd("/Users/hongjingpeng/Desktop/Machine Learning/Machine-Learning-2022W/PSet1")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(leaps)
library(data.table)
setwd("/Users/hongjingpeng/Desktop/Machine Learning/Machine-Learning-2022W/PSet1")
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(leaps)
library(data.table)
setwd("/Users/hongjingpeng/Desktop/Machine Learning/Machine-Learning-2022W/PSet1")
ggplot()+
geom_function(fun = G, colour = "red")
library(ggplot2)
setwd("/Users/hongjingpeng/Desktop/Machine\ Learning/Machine-Learning-2022W/PSet3")
ggplot()+
geom_function(fun = G, colour = "red")
G = function(x) 2*x*(1-x)
ggplot()+
geom_function(fun = G, colour = "red")
G = function(x) 2*x*(1-x)
D = function(x) -x*log(x)-(1-x)*log(1-x)
ggplot()+
geom_function(fun = G, colour = "red")+
geom_function(fun = D, colour = "green")+
xlim(0, 1)
G = function(x) 2*x*(1-x)
D = function(x) -x*log(x)-(1-x)*log(1-x)
ggplot()+
geom_function(fun = G, colour = "red")+
geom_function(fun = D, colour = "blue")+
xlim(0, 1)
G = function(x) 2*x*(1-x)
D = function(x) -x*log(x)-(1-x)*log(1-x)
E = function(x) 1-max(c(x, 1-x))
ggplot()+
geom_function(fun = G, colour = "red")+
geom_function(fun = D, colour = "blue")+
geom_function(fun = E, colour = "orange")+
xlim(0, 1)
E = function(x) 1-max(x, 1-x)
ggplot()+
geom_function(fun = G, colour = "red")+
geom_function(fun = D, colour = "blue")+
geom_function(fun = E, colour = "orange")+
xlim(0, 1)
E = function(x) 1-max(x, 1-x)
ggplot()+
geom_function(fun = G, colour = "red")+
geom_function(fun = D, colour = "blue")+
geom_function(fun = E, colour = "orange")+
xlim(0, 1)
G = function(x) 2*x*(1-x)
D = function(x) -x*log(x)-(1-x)*log(1-x)
E = function(x) 1-min(x, 1-x)
ggplot()+
geom_function(fun = G, colour = "red")+
geom_function(fun = D, colour = "blue")+
geom_function(fun = E, colour = "orange")+
xlim(0, 1)
E = function(x) 1-min(x, 1-x)
E(1)
E = function(x) 1-min(x, 1-x)
E(0.5)
E = function(x) 1-min(x, 1-x)
E(0.6)
E = function(x) 1-max(x, 1-x)
E(0.6)
E = function(x) 1-max(x, 1-x)
E(0.4)
G = function(x) 2*x*(1-x)
D = function(x) -x*log(x)-(1-x)*log(1-x)
E = function(x) 1-max(x, 1-x)
ggplot()+
geom_function(fun = G, colour = "red")+
geom_function(fun = D, colour = "blue")+
geom_function(fun = E, colour = "orange")+
xlim(0, 1)
ggplot()+
geom_function(fun = E, colour = "orange")+
xlim(0, 1)
x = seq(0, 1, 100)
G =  2*x*(1-x)
D = -x*log(x)-(1-x)*log(1-x)
E = 1-max(x, 1-x)
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G), colour = "orange")+
x = seq(0, 1, 100)
G =  2*x*(1-x)
D = -x*log(x)-(1-x)*log(1-x)
E = 1-max(x, 1-x)
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G), colour = "orange")
x = seq(0, 1, .01)
G =  2*x*(1-x)
D = -x*log(x)-(1-x)*log(1-x)
E = 1-max(x, 1-x)
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G), colour = "orange")
x = seq(0, 1, .01)
G =  2*x*(1-x)
D = -x*log(x)-(1-x)*log(1-x)
E = 1-max(x, 1-x)
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G))+
geom_line(aes(y=D))+
geom_line(aes(y=E))
E = 1-(x*(x > 0.5)+(1-x)*(x <= 0.5))
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G))+
geom_line(aes(y=D))+
geom_line(aes(y=E))
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x, color=Species))+
geom_line(aes(y=G))+
geom_line(aes(y=D))+
geom_line(aes(y=E))
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G))+
geom_line(aes(y=D))+
geom_line(aes(y=E))
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G), col='green')+
geom_line(aes(y=D), col='blue')+
geom_line(aes(y=E), col='pink')
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G), col='green')+
geom_line(aes(y=D), col='blue')+
geom_line(aes(y=E), col='red')
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G), col='blue')+
geom_line(aes(y=D), col='orange')+
geom_line(aes(y=E), col='red')
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G), col='G')+
geom_line(aes(y=D), col='D')+
geom_line(aes(y=E), col='E')
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
scale_color_manual(values = c("G" = "darkblue", "D" = "red"))
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
scale_color_manual(name = "",
values = c("G" = "Gini index", "D" = "Entropy", "E" = "Classification error"))
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
labs(G='NEW LEGEND TITLE')
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
scale_color_hue(labels = c("G", "D"))+
labs(G='NEW LEGEND TITLE')
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
scale_color_hue(labels = c("Gini index", "Entropy", "Classification rate"))
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
scale_color_hue(labels = c("Gini index", "Entropy", "Classification rate"))+
theme(legend.position = c(0.8, 0.2))
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
scale_color_hue(labels = c("Gini index", "Entropy", "Classification rate"))+
theme(legend.position = c(0.5, 0.2))
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
scale_color_hue(labels = c("Gini index", "Entropy", "Classification rate"))+
theme(legend.position = "bottom", legend.box = "horizontal")
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
scale_color_hue("h", labels = c("Gini index", "Entropy", "Classification rate"))+
theme(legend.position = "bottom", legend.box = "horizontal")
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
scale_color_hue("", labels = c("Gini index", "Entropy", "Classification rate"))+
theme(legend.position = "bottom", legend.box = "horizontal")
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
xlab("p")+
ylab("Criterion")+
scale_color_hue("", labels = c("Gini index", "Entropy", "Classification rate"))+
theme(legend.position = "bottom", legend.box = "horizontal")
ggsave("output/ch8q3.png", width = 300, height = 200, dpi = 300)
ggsave("output/ch8q3.png", width = 6, height = 4, dpi = 300)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
xlab("p")+
ylab("Criterion")+
scale_color_hue("", labels = c(E="Gini index", "Entropy", "Classification rate"))+
theme(legend.position = "bottom", legend.box = "horizontal")
ggsave("output/ch8q3.png", width = 6, height = 4, dpi = 300)
data = data.frame(x, G, D, E)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
xlab("p")+
ylab("Criterion")+
scale_color_hue("", labels = c(G="Gini index", D="Entropy", E="Classification rate"))+
theme(legend.position = "bottom", legend.box = "horizontal")
ggsave("output/ch8q3.png", width = 6, height = 4, dpi = 300)
library(ISLR)
car = Carseats
set.seed(1)
train=sample(1:nrow(Carseats), 200)
Carseats.train=Carseats[train,]
Carseats.test=Carseats[-train,]
library(tree)
install.packages("tree")
library(tree)
tree.carseats=tree(Sales~.,Carseats)
summary(tree.carseats)
tree.carseats=tree(Sales~., Carseats.train)
summary(tree.carseats)
plot(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
tree.carseats=tree(Sales~., Carseats, ,subset=train)
plot(tree.carseats)
text(tree.carseats,pretty=0)
summary(tree.carseats)
tree.carseats=tree(Sales~., Carseats,subset=train)
summary(tree.carseats)
tree.carseats=tree(Sales~., Carseats.train)
summary(tree.carseats)
ggplot(data=data, aes(x=x))+
geom_line(aes(y=G, col='G'))+
geom_line(aes(y=D, col='D'))+
geom_line(aes(y=E, col='E'))+
xlab("p")+
ylab("Criterion")+
scale_color_hue("", labels = c(G="Gini index", D="Entropy", E="Classification error"))+
theme(legend.position = "bottom", legend.box = "horizontal")
ggsave("output/ch8q3.png", width = 6, height = 4, dpi = 300)
